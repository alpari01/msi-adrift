from opendrift.models.leeway import Leeway
from opendrift.readers import reader_netCDF_CF_generic
from opendrift.readers import reader_ROMS_native
from datetime import datetime, timedelta
import dateutil.parser

print('setting up leeway model...')

filename = '{{nc_output_path}}'

""" Set seeding conditions """
longitude = {{longitude}}
latitude = {{latitude}}

N = {{particles_amount}}

start_time = datetime({{start_time_datetime}})
end_time = datetime({{end_time_datetime}})

R = {{radius}}

duration = "{{duration}}"
duration_days = int(duration.split(" ")[0])
duration_hours = int(duration.split(" ")[2])
duration_minutes = int(duration.split(" ")[4])
    
""" Model initialization """
model = Leeway(loglevel=0)
model.set_config('general:use_auto_landmask', True)

""" Add readers """
print('fetching {{opendap_url}}')

"""phys = reader_ROMS_native.Reader('{{opendap_url}}')"""

phys = reader_netCDF_CF_generic.Reader('{{opendap_url}}', standard_name_mapping={
                                                        'SSU':'x_sea_water_velocity',
                                                        'SSV':'y_sea_water_velocity',
                                                    })
print(f"phys: {phys}")

print('fetching {{wind_url}}')
"""wind = reader_netCDF_CF_generic.Reader('{{wind_url}}')"""

wind = reader_netCDF_CF_generic.Reader('{{wind_url}}', standard_name_mapping={
                                                            'u10':'x_wind',
                                                            'v10':'y_wind'
                                                       })
print(f"wind: {wind}")

model.add_reader([phys,wind])

object_type = {{object_type}} # {{object_type_key}} {{object_type_description}}

print(f"Seeding model with: lon={longitude}, lat={latitude}, z=0, number={N}, radius={R}, object_type={object_type}")
print(f"start_time: {start_time}")

""" Seed elements """
model.seed_elements(lon=longitude,
                    lat=latitude,
                    number=N,
                    radius=R,
                    radius_type="uniform",
                    time=start_time,
                    object_type=object_type
                )

""" Model run """
print('starting model run')
model.run(duration=timedelta(hours=duration_hours),
        time_step=600,
        outfile=filename,
        export_variables=["trajectory", 
                            "time", 
                            "status",
                            "age_seconds",
                            "lon", 
                            "lat"]
        )

#(times,a) = lw.get_time_array()
#(lats,lons) = lw.get_lonlats()
print('finished model run')
